"""
Django settings for servicesbladi project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment detection - Detect Render, Heroku, or manual production
IS_PRODUCTION = (
    os.environ.get('DJANGO_ENV') == 'production' or 
    os.environ.get('RENDER') is not None or
    os.environ.get('DYNO') is not None  # Heroku
)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-dj217004uhfoid4ut98h9843h98fn-dkn2f808jf9jkef')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = not IS_PRODUCTION

# Allowed hosts for deployment
if IS_PRODUCTION:
    ALLOWED_HOSTS = [
        # Render
        os.environ.get('RENDER_EXTERNAL_HOSTNAME', ''),
        '.onrender.com',
        # Heroku
        os.environ.get('HEROKU_APP_NAME', '') + '.herokuapp.com',
        '.herokuapp.com',
        # Custom domain
        os.environ.get('ALLOWED_HOST', ''),
        # Local
        'localhost',
        '127.0.0.1',
        '0.0.0.0'
    ]
    # Clean empty hosts
    ALLOWED_HOSTS = [host for host in ALLOWED_HOSTS if host and host != '.herokuapp.com']
else:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third party apps
    'rest_framework',
    'corsheaders',  # Add CORS headers support
    # Custom apps
    'accounts',
    'services',
    'custom_requests',
    'resources',
    'channels',  # Ajouter Django Channels
    'messaging',  # Application de messagerie
    'chatbot',  # Application chatbot MRE
    'notifications',  # New notification system
]

AUTH_USER_MODEL = 'accounts.Utilisateur'

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Must be at the top
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise for static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'servicesbladi.middleware.CacheControlMiddleware',  # Add our cache control middleware
]

ROOT_URLCONF = 'servicesbladi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),  # Backend templates directory
        ],
        'APP_DIRS': True,
        'OPTIONS': {'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',  # For internationalization
                'servicesbladi.context_processors.language_context',  # Custom context processor for language
                'servicesbladi.context_processors.cache_version_context',  # Cache version processor
                'chatbot.context_processors.chatbot_context',  # Chatbot MRE context processor
            ],
        },
    },
]

WSGI_APPLICATION = 'servicesbladi.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration - production vs development
if IS_PRODUCTION:
    # Production database configuration
    # Support multiple deployment platforms
    import dj_database_url
    
    # Try DATABASE_URL first (Render, Heroku style)
    if os.environ.get('DATABASE_URL'):
        DATABASES = {
            'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
        }
    else:
        # Individual environment variables fallback
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.environ.get('PGDATABASE'),
                'USER': os.environ.get('PGUSER'),
                'PASSWORD': os.environ.get('PGPASSWORD'),
                'HOST': os.environ.get('PGHOST'),
                'PORT': os.environ.get('PGPORT', '5432'),
                'OPTIONS': {
                    'sslmode': 'require',
                },
            }
        }
else:
    # Local development database configuration (PostgreSQL)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'servicesbladi',
            'USER': 'servicesbladiuser',
            'PASSWORD': 'servicesbladi_pass',
            'HOST': '127.0.0.1',
            'PORT': '5432',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'fr'

# Available languages for translation
LANGUAGES = [
    ('fr', _('French')),
    ('en', _('English')),
    ('ar', _('Arabic')),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # Source static files in backend/static
]

# Static files configuration for production/local
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles_collected')  # Collected static files

# WhiteNoise configuration for better static file serving
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# WhiteNoise settings for production
if IS_PRODUCTION:
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_AUTOREFRESH = True

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login and logout URLs
LOGIN_URL = 'accounts:login'
LOGIN_REDIRECT_URL = 'accounts:dashboard_redirect'
LOGOUT_REDIRECT_URL = 'home'

# Email Configuration (using SMTP for production)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
}

# CORS settings for cross-origin requests
if IS_PRODUCTION:
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS = [
        # Render 
        f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME', '')}",
        # Custom domains
        f"https://{os.environ.get('ALLOWED_HOST', '')}",
        # Add your actual frontend domain if you have one
        "https://your-frontend-domain.com",
    ]
    CORS_ALLOWED_ORIGINS = [origin for origin in CORS_ALLOWED_ORIGINS if origin.startswith('https://') and len(origin) > 8]
else:
    CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Custom settings for ServicesBLADI
SERVICESBLADI_ADMIN_EMAIL = 'admin@servicesbladi.com'
SERVICESBLADI_SUPPORT_EMAIL = 'support@servicesbladi.com'
SERVICESBLADI_CONTACT_EMAIL = 'abidou.mohammed03@gmail.com'

# List of countries for form choices
COUNTRIES = [
    ('AF', _('Afghanistan')),
    ('AL', _('Albanie')),
    ('DZ', _('Algérie')),
    ('AD', _('Andorre')),
    ('AO', _('Angola')),
    ('AG', _('Antigua-et-Barbuda')),
    ('AR', _('Argentine')),
    ('AM', _('Arménie')),
    ('AU', _('Australie')),
    ('AT', _('Autriche')),
    ('AZ', _('Azerbaïdjan')),
    ('BS', _('Bahamas')),
    ('BH', _('Bahreïn')),
    ('BD', _('Bangladesh')),
    ('BB', _('Barbade')),
    ('BY', _('Biélorussie')),
    ('BE', _('Belgique')),
    ('BZ', _('Belize')),
    ('BJ', _('Bénin')),
    ('BT', _('Bhoutan')),
    ('BO', _('Bolivie')),
    ('BA', _('Bosnie-Herzégovine')),
    ('BW', _('Botswana')),
    ('BR', _('Brésil')),
    ('BN', _('Brunei')),
    ('BG', _('Bulgarie')),
    ('BF', _('Burkina Faso')),
    ('BI', _('Burundi')),
    ('KH', _('Cambodge')),
    ('CM', _('Cameroun')),
    ('CA', _('Canada')),
    ('CV', _('Cap-Vert')),
    ('CF', _('République centrafricaine')),
    ('TD', _('Tchad')),
    ('CL', _('Chili')),
    ('CN', _('Chine')),
    ('CO', _('Colombie')),
    ('KM', _('Comores')),
    ('CG', _('Congo')),
    ('CR', _('Costa Rica')),
    ('HR', _('Croatie')),
    ('CU', _('Cuba')),
    ('CY', _('Chypre')),
    ('CZ', _('République tchèque')),
    ('DK', _('Danemark')),
    ('DJ', _('Djibouti')),
    ('DM', _('Dominique')),
    ('DO', _('République dominicaine')),
    ('EC', _('Équateur')),
    ('EG', _('Égypte')),
    ('SV', _('El Salvador')),
    ('GQ', _('Guinée équatoriale')),
    ('ER', _('Érythrée')),
    ('EE', _('Estonie')),
    ('ET', _('Éthiopie')),
    ('FJ', _('Fidji')),
    ('FI', _('Finlande')),
    ('FR', _('France')),
    ('GA', _('Gabon')),
    ('GM', _('Gambie')),
    ('GE', _('Géorgie')),
    ('DE', _('Allemagne')),
    ('GH', _('Ghana')),
    ('GR', _('Grèce')),
    ('GD', _('Grenade')),
    ('GT', _('Guatemala')),
    ('GN', _('Guinée')),
    ('GW', _('Guinée-Bissau')),
    ('GY', _('Guyana')),
    ('HT', _('Haïti')),
    ('HN', _('Honduras')),
    ('HU', _('Hongrie')),
    ('IS', _('Islande')),
    ('IN', _('Inde')),
    ('ID', _('Indonésie')),
    ('IR', _('Iran')),
    ('IQ', _('Irak')),
    ('IE', _('Irlande')),
    ('IL', _('Israël')),
    ('IT', _('Italie')),
    ('JM', _('Jamaïque')),
    ('JP', _('Japon')),
    ('JO', _('Jordanie')),
    ('KZ', _('Kazakhstan')),
    ('KE', _('Kenya')),
    ('KI', _('Kiribati')),
    ('KP', _('Corée du Nord')),
    ('KR', _('Corée du Sud')),
    ('KW', _('Koweït')),
    ('KG', _('Kirghizistan')),
    ('LA', _('Laos')),
    ('LV', _('Lettonie')),
    ('LB', _('Liban')),
    ('LS', _('Lesotho')),
    ('LR', _('Libéria')),
    ('LY', _('Libye')),
    ('LI', _('Liechtenstein')),
    ('LT', _('Lituanie')),
    ('LU', _('Luxembourg')),
    ('MK', _('Macédoine du Nord')),
    ('MG', _('Madagascar')),
    ('MW', _('Malawi')),
    ('MY', _('Malaisie')),
    ('MV', _('Maldives')),
    ('ML', _('Mali')),
    ('MT', _('Malte')),
    ('MH', _('Îles Marshall')),
    ('MR', _('Mauritanie')),
    ('MU', _('Maurice')),
    ('MX', _('Mexique')),
    ('FM', _('Micronésie')),
    ('MD', _('Moldavie')),
    ('MC', _('Monaco')),
    ('MN', _('Mongolie')),
    ('ME', _('Monténégro')),
    ('MA', _('Maroc')),
    ('MZ', _('Mozambique')),
    ('MM', _('Myanmar')),
    ('NA', _('Namibie')),
    ('NR', _('Nauru')),
    ('NP', _('Népal')),
    ('NL', _('Pays-Bas')),
    ('NZ', _('Nouvelle-Zélande')),
    ('NI', _('Nicaragua')),
    ('NE', _('Niger')),
    ('NG', _('Nigeria')),
    ('NO', _('Norvège')),
    ('OM', _('Oman')),
    ('PK', _('Pakistan')),
    ('PW', _('Palaos')),
    ('PS', _('Palestine')),
    ('PA', _('Panama')),
    ('PG', _('Papouasie-Nouvelle-Guinée')),
    ('PY', _('Paraguay')),
    ('PE', _('Pérou')),
    ('PH', _('Philippines')),
    ('PL', _('Pologne')),
    ('PT', _('Portugal')),
    ('QA', _('Qatar')),
    ('RO', _('Roumanie')),
    ('RU', _('Russie')),
    ('RW', _('Rwanda')),
    ('KN', _('Saint-Kitts-et-Nevis')),
    ('LC', _('Sainte-Lucie')),
    ('VC', _('Saint-Vincent-et-les-Grenadines')),
    ('WS', _('Samoa')),
    ('SM', _('Saint-Marin')),
    ('ST', _('São Tomé-et-Principe')),
    ('SA', _('Arabie saoudite')),
    ('SN', _('Sénégal')),
    ('RS', _('Serbie')),
    ('SC', _('Seychelles')),
    ('SL', _('Sierra Leone')),
    ('SG', _('Singapour')),
    ('SK', _('Slovaquie')),
    ('SI', _('Slovénie')),
    ('SB', _('Îles Salomon')),
    ('SO', _('Somalie')),
    ('ZA', _('Afrique du Sud')),
    ('SS', _('Soudan du Sud')),
    ('ES', _('Espagne')),
    ('LK', _('Sri Lanka')),
    ('SD', _('Soudan')),
    ('SR', _('Suriname')),
    ('SE', _('Suède')),
    ('CH', _('Suisse')),
    ('SY', _('Syrie')),
    ('TW', _('Taïwan')),
    ('TJ', _('Tadjikistan')),
    ('TZ', _('Tanzanie')),
    ('TH', _('Thaïlande')),
    ('TL', _('Timor oriental')),
    ('TG', _('Togo')),
    ('TO', _('Tonga')),
    ('TT', _('Trinité-et-Tobago')),
    ('TN', _('Tunisie')),
    ('TR', _('Turquie')),
    ('TM', _('Turkménistan')),
    ('TV', _('Tuvalu')),
    ('UG', _('Ouganda')),
    ('UA', _('Ukraine')),
    ('AE', _('Émirats arabes unis')),
    ('GB', _('Royaume-Uni')),
    ('US', _('États-Unis')),
    ('UY', _('Uruguay')),
    ('UZ', _('Ouzbékistan')),
    ('VU', _('Vanuatu')),
    ('VA', _('Vatican')),
    ('VE', _('Venezuela')),
    ('VN', _('Vietnam')),
    ('YE', _('Yémen')),
    ('ZM', _('Zambie')),
    ('ZW', _('Zimbabwe')),
]

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'accounts.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Django Channels
ASGI_APPLICATION = 'servicesbladi.asgi.application'

# Channel Layers configuration
if IS_PRODUCTION:
    # Use Redis for production if available, otherwise fallback to InMemory
    REDIS_URL = os.environ.get('REDIS_URL')
    if REDIS_URL:
        CHANNEL_LAYERS = {
            'default': {
                'BACKEND': 'channels_redis.core.RedisChannelLayer',
                'CONFIG': {
                    'hosts': [REDIS_URL],
                    'capacity': 1500,
                    'expiry': 60,
                },
            },
        }
    else:
        # Fallback to InMemory for production without Redis
        CHANNEL_LAYERS = {
            'default': {
                'BACKEND': 'channels.layers.InMemoryChannelLayer',
                'CONFIG': {
                    'capacity': 1500,
                },
            },
        }
else:
    # Local development
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer',
            'CONFIG': {
                'capacity': 1500,
            },
        },
    }

# Paramètres de session et de cache
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Utiliser la base de données pour les sessions
SESSION_COOKIE_AGE = 86400  # Durée de vie de la session (en secondes) - 1 jour
SESSION_SAVE_EVERY_REQUEST = True  # Enregistrer la session à chaque requête
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Expirer la session à la fermeture du navigateur

# Paramètres de cache - Désactiver autant que possible
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.dummy.DummyCache',  # Ne pas mettre en cache
    }
}

# Email Configuration
if IS_PRODUCTION:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.gmail.com')
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
    EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() == 'true'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
    DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'ServicesBladi <noreply@servicesbladi.com>')
else:
    # Local development - use console backend
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    EMAIL_HOST_USER = 'adval.devteam@gmail.com'
    DEFAULT_FROM_EMAIL = 'ServicesBladi <adval.devteam@gmail.com>'

EMAIL_SUBJECT_PREFIX = '[Adval Services] '

# Chatbot MRE Configuration
# Azure OpenAI Configuration for production
if IS_PRODUCTION:
    AZURE_OPENAI_ENDPOINT = os.environ.get('AZURE_OPENAI_ENDPOINT', '')
    AZURE_OPENAI_API_KEY = os.environ.get('AZURE_OPENAI_API_KEY', '')
else:
    # Disabled for local development
    AZURE_OPENAI_ENDPOINT = ""  
    AZURE_OPENAI_API_KEY = ""   

AZURE_OPENAI_API_VERSION = "2025-01-01-preview"
AZURE_OPENAI_MODEL = "gpt-4o"

# Production Security Settings
if IS_PRODUCTION:
    # Security Headers
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # SSL Settings (handled by deployment platform)
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    USE_TLS = True
    
    # Session Security
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    
    # Additional Security
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# File Upload Limits
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple' if not IS_PRODUCTION else 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'servicesbladi': {
            'handlers': ['console'],
            'level': 'DEBUG' if not IS_PRODUCTION else 'INFO',
            'propagate': False,
        },
    },
}